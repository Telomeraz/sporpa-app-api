# Generated by Django 4.1.2 on 2022-12-24 15:21

import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("participants", "0002_alter_playersport_options"),
    ]

    operations = [
        migrations.CreateModel(
            name="Activity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active. Unselect this instead of deleting records.",
                        verbose_name="active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Enter a datetime instead when you delete the record.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "player_limit",
                    models.PositiveSmallIntegerField(
                        default=2,
                        validators=[
                            django.core.validators.MinValueValidator(2),
                            django.core.validators.MaxValueValidator(30),
                        ],
                        verbose_name="maximum number of players",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                ("about", models.TextField(blank=True, max_length=600, verbose_name="about")),
                (
                    "available_between_at",
                    django.contrib.postgres.fields.ranges.DateTimeRangeField(verbose_name="available between at"),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Open"), (2, "Played"), (3, "Cancelled")], default=1, verbose_name="status"
                    ),
                ),
            ],
            options={
                "verbose_name": "activity",
                "verbose_name_plural": "activities",
                "db_table": "activity",
            },
        ),
        migrations.CreateModel(
            name="ActivityPlayer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_organizer", models.BooleanField(default=False)),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_players",
                        to="events.activity",
                        verbose_name="activity",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_players",
                        to="participants.player",
                        verbose_name="player",
                    ),
                ),
            ],
            options={
                "verbose_name": "activity player",
                "verbose_name_plural": "activity players",
                "db_table": "activity_player",
            },
        ),
        migrations.CreateModel(
            name="ActivityLevel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_levels",
                        to="events.activity",
                        verbose_name="activity",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activity_levels",
                        to="participants.sportlevel",
                        verbose_name="level",
                    ),
                ),
            ],
            options={
                "verbose_name": "activity level",
                "verbose_name_plural": "activity levels",
                "db_table": "activity_level",
            },
        ),
        migrations.AddField(
            model_name="activity",
            name="levels",
            field=models.ManyToManyField(
                related_name="activities",
                through="events.ActivityLevel",
                to="participants.sportlevel",
                verbose_name="level",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="players",
            field=models.ManyToManyField(
                related_name="activities",
                through="events.ActivityPlayer",
                to="participants.player",
                verbose_name="player",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="sport",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="activities",
                to="participants.sport",
                verbose_name="sport",
            ),
        ),
        migrations.AddConstraint(
            model_name="activityplayer",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_organizer", True)),
                fields=("activity", "is_organizer"),
                name="only_one_organizer",
            ),
        ),
        migrations.AddConstraint(
            model_name="activitylevel",
            constraint=models.UniqueConstraint(fields=("activity", "level"), name="activity_level_unique"),
        ),
        migrations.AddConstraint(
            model_name="activity",
            constraint=models.CheckConstraint(
                check=models.Q(("available_between_at__lower_inf", False)),
                name="lower_cannot_be_infinite",
                violation_error_message="available_between_at lower value cannot be infinite.",
            ),
        ),
        migrations.AddConstraint(
            model_name="activity",
            constraint=models.CheckConstraint(
                check=models.Q(("available_between_at__upper_inf", False)),
                name="upper_cannot_be_infinite",
                violation_error_message="available_between_at upper value cannot be infinite.",
            ),
        ),
    ]
